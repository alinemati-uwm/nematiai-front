name: Development Docker Container

on:
  push:
    branches: ["development"] 
  pull_request:
    branches: ["development"] 

jobs:
  build-test-deploy:
    runs-on: [self-hosted]

    steps:
      # Step 0: Enhanced free up disk space and memory
      - name: Enhanced system cleanup
        run: |
          echo "Before cleanup:"
          df -h
          free -h
          
          # More aggressive disk cleanup
          sudo apt-get autoremove -y
          sudo apt-get clean
          
          # Clear system logs
          sudo journalctl --vacuum-time=1d
          sudo find /var/log -type f -name "*.gz" -delete
          sudo find /var/log -type f -name "*.1" -delete
          sudo find /var/log -type f -name "*.old" -delete
          
          # Clean temp directories
          sudo rm -rf /tmp/* || true
          sudo rm -rf /var/tmp/* || true
          
          # Clean package manager caches
          sudo apt-get autoclean
          
          # Remove old Docker resources
          docker system prune -af --volumes
          
          # Clear swap and page cache
          sudo swapoff -a && sudo swapon -a
          sudo sync && echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null
          
          # Find and report large files
          echo "Top 10 largest directories:"
          sudo du -h --max-depth=2 / 2>/dev/null | sort -hr | head -10
          
          echo "After cleanup:"
          df -h
          free -h
          
          echo "Enhanced system cleanup completed"

      # Step 1: Stop any running containers to ensure a clean state
      - name: Clean up Docker resources
        run: |
          docker compose down || true
          echo "Step 1 completed: Docker resources cleaned up"

      # Step 2: Checkout repository into a temporary folder
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: false
          fetch-depth: 1
          path: tmp_checkout

      # Step 3: Check the directory structure for debugging
      - name: Debug - Check Directory Structure
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing repository root:"
          ls -la
          echo "Listing tmp_checkout directory:"
          ls -la tmp_checkout/
          echo "Checking docker directory:"
          ls -la tmp_checkout/docker/ || echo "Docker directory not found!"
          echo "Checking development directory:"
          ls -la tmp_checkout/docker/development/ || echo "Development directory not found!"
          echo "Checking for compose file:"
          [ -f tmp_checkout/docker/development/docker-compose.yml ] && echo "docker-compose.yml exists!" || echo "docker-compose.yml NOT FOUND!"

      # Step 4: Create .env file
      - name: Create .env File From Secrets
        run: |
          cd tmp_checkout
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" > .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
          echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env
          echo "NEXT_PUBLIC_API_SUBDOMAIN=${{ secrets.NEXT_PUBLIC_API_SUBDOMAIN_DEVELOPMENT }}" >> .env
          echo "APP_MOBILE_TOKEN=${{ secrets.APP_MOBILE_TOKEN }}" >> .env
          cd ..
    
      - name: Debug - Check .env Content
        run: |
          echo "==== .env File Created ===="
          cat tmp_checkout/.env | grep -v SECRET  # Avoid showing secrets in logs!

      # Step 5: Build and Run Docker Container with improved path handling
      - name: Build and Run Docker Container
        run: |
          COMPOSE_FILE="$(pwd)/tmp_checkout/docker/development/docker-compose.yml"
          echo "Using docker-compose file at: $COMPOSE_FILE"
          
          # Check if file exists
          if [ ! -f "$COMPOSE_FILE" ]; then
            echo "ERROR: docker-compose.yml file not found at $COMPOSE_FILE"
            echo "Directory content:"
            ls -la "$(pwd)/tmp_checkout/docker/development/" || echo "Directory doesn't exist"
            exit 1
          fi
          
          # Build and start container using absolute path
          echo "Building Docker container..."
          docker compose -f "$COMPOSE_FILE" build --no-cache
          
          echo "Starting Docker container..."
          docker compose -f "$COMPOSE_FILE" up -d

