name: Development Docker Container

on:
  push:
    branches: ["development"] 
  pull_request:
    branches: ["development"] 

jobs:
  build-test-deploy:
    runs-on: [self-hosted]

    steps:
      # Step 0: Enhanced free up disk space and memory
      - name: Enhanced system cleanup
        run: |
          echo "Before cleanup:"
          df -h
          free -h
          
          # More aggressive disk cleanup
          sudo apt-get autoremove -y
          sudo apt-get clean
          
          # Clear system logs
          sudo journalctl --vacuum-time=1d
          sudo find /var/log -type f -name "*.gz" -delete
          sudo find /var/log -type f -name "*.1" -delete
          sudo find /var/log -type f -name "*.old" -delete
          
          # Clean temp directories
          sudo rm -rf /tmp/* || true
          sudo rm -rf /var/tmp/* || true
          
          # Clean package manager caches
          sudo apt-get autoclean
          
          # Remove old Docker resources
          docker system prune -af --volumes
          
          # Clear swap and page cache
          sudo swapoff -a && sudo swapon -a
          sudo sync && echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null
          
          # Find and report large files
          echo "Top 10 largest directories:"
          sudo du -h --max-depth=2 / 2>/dev/null | sort -hr | head -10
          
          echo "After cleanup:"
          df -h
          free -h
          
          echo "Enhanced system cleanup completed"

      # Step 1: Stop any running containers to ensure a clean state
      - name: Clean up Docker resources
        run: |
          docker compose down || true
          echo "Step 1 completed: Docker resources cleaned up"

      # Step 2: Checkout repository into a temporary folder
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: false
          fetch-depth: 1
          path: tmp_checkout

      # Step 3: Advanced debugging to identify path and file issues
      - name: Advanced Debug - Environment & Files
        run: |
          echo "===== SYSTEM INFORMATION ====="
          uname -a
          echo "GitHub Runner OS: $RUNNER_OS"
          echo "GitHub Workspace: $GITHUB_WORKSPACE"
          
          echo "===== ENVIRONMENT VARIABLES ====="
          env | sort
          
          echo "===== CURRENT DIRECTORY ====="
          pwd
          
          echo "===== FILE SYSTEM ENCODING ====="
          locale
          echo "LC_ALL: $LC_ALL"
          echo "LANG: $LANG"
          
          echo "===== DIRECTORY STRUCTURE ====="
          echo "Root directory:"
          ls -la
          
          echo "===== TMP_CHECKOUT DIRECTORY ====="
          if [ -d "tmp_checkout" ]; then
            ls -la tmp_checkout/
          else
            echo "ERROR: tmp_checkout directory does not exist!"
          fi
          
          echo "===== DOCKER DIRECTORY ====="
          if [ -d "tmp_checkout/docker" ]; then
            ls -la tmp_checkout/docker/
          else
            echo "ERROR: tmp_checkout/docker directory does not exist!"
          fi
          
          echo "===== DEVELOPMENT DIRECTORY ====="
          if [ -d "tmp_checkout/docker/development" ]; then
            ls -la tmp_checkout/docker/development/
          else
            echo "ERROR: tmp_checkout/docker/development directory does not exist!"
          fi
          
          echo "===== FILE CONTENT CHECK ====="
          if [ -f "tmp_checkout/docker/development/docker-compose.yml" ]; then
            echo "docker-compose.yml exists, showing first 10 lines:"
            head -n 10 tmp_checkout/docker/development/docker-compose.yml
          else
            echo "ERROR: docker-compose.yml does not exist!"
          fi
          
          echo "===== ALTERNATIVE PATH CHECK ====="
          echo "Checking if the file exists in weird path formats:"
          find . -name "docker-compose.yml" -type f | grep -i docker

      # Step 4: Create .env file
      - name: Create .env File From Secrets
        run: |
          cd tmp_checkout
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" > .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
          echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env
          echo "NEXT_PUBLIC_API_SUBDOMAIN=${{ secrets.NEXT_PUBLIC_API_SUBDOMAIN_DEVELOPMENT }}" >> .env
          echo "APP_MOBILE_TOKEN=${{ secrets.APP_MOBILE_TOKEN }}" >> .env
          cd ..
    
      - name: Debug - Check .env Content
        run: |
          echo "==== .env File Created ===="
          cat tmp_checkout/.env | grep -v SECRET  # Avoid showing secrets in logs!

      # Step 5: Build and Run Docker Container with more advanced path handling
      - name: Build and Run Docker Container
        run: |
          echo "===== FINDING COMPOSE FILE ====="
          DOCKER_DIR="$(pwd)/tmp_checkout/docker/development"
          COMPOSE_FILE="${DOCKER_DIR}/docker-compose.yml"
          
          echo "Looking for docker-compose file at: $COMPOSE_FILE"
          if [ -f "$COMPOSE_FILE" ]; then
            echo "FOUND: docker-compose.yml at $COMPOSE_FILE"
          else
            echo "ERROR: docker-compose.yml NOT FOUND at $COMPOSE_FILE"
            echo "Attempting to find any docker-compose.yml file:"
            find "$(pwd)" -name "docker-compose.yml" -type f
          fi
          
          echo "===== COPYING COMPOSE FILE (FALLBACK) ====="
          if [ ! -f "$COMPOSE_FILE" ] && [ -d "$DOCKER_DIR" ]; then
            echo "Attempting to create docker-compose.yml from local content..."
            cat > "$COMPOSE_FILE" << 'EOL'
services:
  # Define a service called 'nerd-studio'
  nerd-studio:
    # Build the image from a Dockerfile
    build:
      context: .
      dockerfile: docker/${DOCKER_ENV:-development}/Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-development}
    image: nerd-studio-${NODE_ENV:-development}
    container_name: nerd-studio-${NODE_ENV:-development}
    ports:
      - "${PORT:-3000}:3000"
    env_file:
      - ${ENV_FILE:-.env}
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - nerd-studio-network
networks:
  nerd-studio-network:
    driver: bridge


