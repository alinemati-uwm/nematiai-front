name: Development Docker Container

on:
  push:
    branches: ["development"] # Trigger on push to master
  pull_request:
    branches: ["development"] # Trigger on pull request to master

jobs:
  build-test-deploy:
    runs-on: [self-hosted] # Use your self-hosted GitHub Actions runner

    steps:
      # Step 0: Enhanced free up disk space and memory
      - name: Enhanced system cleanup
        run: |
          echo "Before cleanup:"
          df -h
          free -h
          
          # More aggressive disk cleanup
          # Remove unused packages and clean apt cache
          sudo apt-get autoremove -y
          sudo apt-get clean
          
          # Clear system logs
          sudo journalctl --vacuum-time=1d
          sudo find /var/log -type f -name "*.gz" -delete
          sudo find /var/log -type f -name "*.1" -delete
          sudo find /var/log -type f -name "*.old" -delete
          
          # Clean temp directories
          sudo rm -rf /tmp/* || true
          sudo rm -rf /var/tmp/* || true
          
          # Clean package manager caches
          sudo apt-get autoclean
          
          # Remove old Docker resources
          docker system prune -af --volumes
          
          # Clear swap and page cache
          sudo swapoff -a && sudo swapon -a
          sudo sync && echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null
          
          # Find and report large files (for information)
          echo "Top 10 largest directories:"
          sudo du -h --max-depth=2 / 2>/dev/null | sort -hr | head -10
          
          echo "After cleanup:"
          df -h
          free -h
          
          echo "Enhanced system cleanup completed"

      # Step 1: Stop any running containers to ensure a clean state
      - name: Clean up Docker resources
        run: |
          docker compose down || true
          echo "Step 1 completed: Docker resources cleaned up"

      # Step 2: Checkout repository into a temporary folder
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: false
          fetch-depth: 1
          path: tmp_checkout

      # Step 3: Create .env file
      - name: Create .env File From Secrets
        run: |
          cd tmp_checkout
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
          echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env
          echo "NEXT_PUBLIC_API_SUBDOMAIN=${{ secrets.NEXT_PUBLIC_API_SUBDOMAIN_DEVELOPMENT }}" >> .env
          echo "APP_MOBILE_TOKEN=${{ secrets.APP_MOBILE_TOKEN }}" >> .env
    
      - name: Debug Step - Check .env Content
        run: |
          echo "==== .env File Created ===="
          cat tmp_checkout/.env | grep -v SECRET  # Avoid showing secrets in logs!

      - name: Debug Check Files
        run: |
          echo "Checking files inside tmp_checkout/"
          ls -la tmp_checkout/

      # Step 4: Build and Run Docker Container
      - name: Build and Run Docker Container
        shell: bash
        run: |
          docker compose -f tmp_checkout/docker/development/docker-compose.yml build --no-cache
          docker compose -f tmp_checkout/docker/development/docker-compose.yml up -d

