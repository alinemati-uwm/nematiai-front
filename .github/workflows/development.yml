name: Development Docker Container

on:
  push:
    branches: [ master, development ]
  pull_request:
    branches: [ master, development ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: [self-hosted]

    steps:
      # Step 1: Checkout latest code
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          clean: false

      - name: Debug Step 1 - Check Files After Checkout
        run: |
          echo "==== Checking files in current directory ===="
          ls -la
          echo "==== Git Branch Info ===="
          git status

      # Step 2: Create .env file
      - name: Create .env File From Secrets
        run: |
          echo "Creating .env file ..."
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
          echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env
          echo "NEXT_PUBLIC_API_SUBDOMAIN=${{ secrets.NEXT_PUBLIC_API_SUBDOMAIN_DEVELOPMENT }}" >> .env
          echo "APP_MOBILE_TOKEN=${{ secrets.APP_MOBILE_TOKEN }}" >> .env

      - name: Debug Step 2 - Check .env Content
        run: |
          echo "==== .env File Created ===="
          cat .env | grep -v SECRET  # Avoid showing secrets in logs!

      # Step 3: Docker Build & Run
      - name: Build and Run Docker Container
        run: |
          echo "==== Docker System Prune ===="
          docker system prune -f

          echo "==== Building Docker Image ===="
          docker compose -f docker/development/docker-compose.yml build

          echo "==== Running Docker Container ===="
          docker compose -f docker/development/docker-compose.yml up -d

      # Step 4: Debug Running Containers
      - name: Debug Step 3 - Show Running Docker Containers
        run: |
          echo "==== Running Containers ===="
          docker ps

      # Step 5: Debug Logs From Container
      - name: Debug Step 4 - Show Last 50 Lines of Logs
        run: |
          echo "==== Last 50 Lines of Logs ===="
          docker compose logs --tail=50



# name: Development Docker Container

# on:
#   push:
#     branches: [ master , development ]
#   pull_request:
#     branches: [ master , development ]
#   workflow_dispatch:

# jobs:
#   deploy:
#     runs-on: [self-hosted]
#     steps:
#       - name: Pulling ...
#         uses: actions/checkout@v3
#         with:
#           clean: false

#       - name: Create .env file
#         run: |
#           echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
#           echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
#           echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
#           echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
#           echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env
#           echo "NEXT_PUBLIC_API_SUBDOMAIN=${{ secrets.NEXT_PUBLIC_API_SUBDOMAIN_DEVELOPMENT }}" >> .env
#           echo "APP_MOBILE_TOKEN=${{ secrets.APP_MOBILE_TOKEN }}" >> .env
          

#       - name: Build and Run Docker container
#         run: |
#           docker system prune -f
#           docker compose -f docker/development/docker-compose.yml build
#           docker compose -f docker/development/docker-compose.yml up -d
          
