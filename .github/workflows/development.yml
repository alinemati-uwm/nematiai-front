name: Development Docker Container

on:
  push:
    branches: ["development"] # Trigger on push to master
  pull_request:
    branches: ["development"] # Trigger on pull request to master

jobs:
  build-test-deploy:
    runs-on: [self-hosted] # Use your self-hosted GitHub Actions runner

    steps:


      # Step 0: Enhanced free up disk space and memory
      - name: Enhanced system cleanup
        run: |
          echo "Before cleanup:"
          df -h
          free -h
          
          # More aggressive disk cleanup
          # Remove unused packages and clean apt cache
          sudo apt-get autoremove -y
          sudo apt-get clean
          
          # Clear system logs
          sudo journalctl --vacuum-time=1d
          sudo find /var/log -type f -name "*.gz" -delete
          sudo find /var/log -type f -name "*.1" -delete
          sudo find /var/log -type f -name "*.old" -delete
          
          # Clean temp directories
          sudo rm -rf /tmp/* || true
          sudo rm -rf /var/tmp/* || true
          
          # Clean package manager caches
          sudo apt-get autoclean
          
          # Remove old Docker resources
          docker system prune -af --volumes
          
          # Clear swap and page cache
          sudo swapoff -a && sudo swapon -a
          sudo sync && echo 3 | sudo tee /proc/sys/vm/drop_caches > /dev/null
          
          # Find and report large files (for information)
          echo "Top 10 largest directories:"
          sudo du -h --max-depth=2 / 2>/dev/null | sort -hr | head -10
          
          echo "After cleanup:"
          df -h
          free -h
          
          echo "Enhanced system cleanup completed"
      # Step 1: Stop any running containers to ensure a clean state
      - name: Clean up Docker resources
        run: |
          docker compose down || true
          echo "Step 1 completed: Docker resources cleaned up"




      # Step 3: Checkout repository into a temporary folder
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: false
          fetch-depth: 1
          path: tmp_checkout


      # Step 2: Create .env file
      - name: Create .env File From Secrets
        run: |
          echo "Creating .env file ..."
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
          echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env
          echo "NEXT_PUBLIC_API_SUBDOMAIN=${{ secrets.NEXT_PUBLIC_API_SUBDOMAIN_DEVELOPMENT }}" >> .env
          echo "APP_MOBILE_TOKEN=${{ secrets.APP_MOBILE_TOKEN }}" >> .env

      - name: Debug Step 2 - Check .env Content
        run: |
          echo "==== .env File Created ===="
          cat .env | grep -v SECRET  # Avoid showing secrets in logs!

      # Step 3: Docker Build & Run
      - name: Build and Run Docker Container
        run: |
        cd tmp_checkout
          docker compose -f docker/development/docker-compose.yml build
          docker compose -f docker/development/docker-compose.yml up -d
      
      

      # # Step 4: Debug Running Containers
      # - name: Debug Step 3 - Show Running Docker Containers
      #   run: |
      #     echo "==== Running Containers ===="
      #     docker ps

      # # Step 5: Debug Logs From Container
      # - name: Debug Step 4 - Show Last 50 Lines of Logs
      #   run: |
      #     echo "==== Last 50 Lines of Logs ===="
      #     docker compose logs --tail=50



# name: Development Docker Container

# on:
#   push:
#     branches: [ master , development ]
#   pull_request:
#     branches: [ master , development ]
#   workflow_dispatch:

# jobs:
#   deploy:
#     runs-on: [self-hosted]
#     steps:
#       - name: Pulling ...
#         uses: actions/checkout@v3
#         with:
#           clean: false

#       - name: Create .env file
#         run: |
#           echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
#           echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
#           echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
#           echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
#           echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env
#           echo "NEXT_PUBLIC_API_SUBDOMAIN=${{ secrets.NEXT_PUBLIC_API_SUBDOMAIN_DEVELOPMENT }}" >> .env
#           echo "APP_MOBILE_TOKEN=${{ secrets.APP_MOBILE_TOKEN }}" >> .env
          

#       - name: Build and Run Docker container
#         run: |
#           docker system prune -f
#           docker compose -f docker/development/docker-compose.yml build
#           docker compose -f docker/development/docker-compose.yml up -d
          
